{
	"slides": [
		{
			"heading": "CSS Preprocessors",
			"bullets": [
				"A CSS preprocessor is a tool that aids in writing CSS",
				"CSS preprocessors have valuable features that can make your life easier",
				"Learning CSS preprocessors is easy and requires little effort or time investment"
			]
		},
		{
			"heading": "First, some CSS",
			"bullets": [
				"CSS stands for Cascading Style Sheets",
				"It’s a language that is used to determine how HTML elements are rendered on a screen",
				"A CSS rule-set contains a selector and a block of declarations (declaration block)",
				"The selector identifies the HTML elements subjected to the rules in the declaration block",
				"A declaration is a key-value pair consisting of a property and a property value"
			],
			"code": {
				"type": "css",
				"content": ".red_button{\n   display: block;\n   background: red;\n   letter-spacing: 7px;\n   color: white;\n   padding: 12px 25px;\n}"
			}
		},
		{
			"heading": "CSS is good",
			"bullets": [
				"All of your rule-sets can go in one place and be applied to many pages.  You don’t need to write new rules for each new page (you used to have to do this)",
				"CSS is very simple: basically just key-value pairs.  You can learn it in a very short period of time.  I’ve basically taught you CSS already.",
				"It’s very powerful.  Web design is pretty much all CSS.  You can do cool things like drop shadows and animations."
			],
			"code": {
				"type": "css",
				"content": ".red_button{\n   display: block;\n   background: red;\n   letter-spacing: 7px;\n   color: white;\n   padding: 12px 25px;\n}"
			}
		},
		{
			"heading": "CSS is very bad",
			"bullets": [
				"No variables.  If you use a color in many different elements, it must be entered in each rule-set.  If you change the color, it must be changed in each rule-set",
				"No inheritance* or nesting.  A rule-set may logically be a subset of another and share some properties, but they exist independently of each other",
				"Not modular.  Most of the time you will have one big stylesheet.",
				"No functions or control structures.  Some exceptions, for example calc().  Media queries are a form of control structure."
			]
		},
		{
			"heading": "A Solution: CSS Preprocessors",
			"bullets": [
				"A CSS preprocessor is a program that allows you to write code that compiles down to CSS",
				"Commonly used CSS preprocessors include Sass, LESS, and Stylus.",
				"All have similar syntax and feature sets, but Sass is the most popular"
			]
		},
		{
			"heading": "Variables",
			"bullets": [
				"You can declare variables with a dollar sign",
				"Variables can be used in property values and selectors.  I can only recommend using them in property values."
			],
			"code": {
				"type": "scss",
				"content": "$border: 1px solid #333333;\n\n.box {\n   border: $border;\n}\n\n/** compiles down to **/\n\n.box {\n   border: 1px solid #333333;\n}"
			}
		},
		{
			"heading": "Nesting",
			"bullets": [
				"Nesting rule-sets gives your code a visual hierarchy",
				"I find it makes it easier to read and understand at a glance"
			],
			"code": {
				"type": "scss",
				"content": ".parent {\n   background: transparent;\n   box-shadow: $shadow;\n\n   .child {\n      font-weight: 700;\n      color: $red;\n   }\n }\n\n/** compiles down to **/\n\n.parent {\n   background: transparent;\n   box-shadow: $shadow;\n}\n\n.parent .child {\n   font-weight: 700;\n   color: $red;\n}"
			}
		},
		{
			"heading": "Sass is modular",
			"bullets": [
				"You can create multiple files including partials, which are files that get compiled into the main file.",
				"Partials begin with an underscore.  For example, _navigation.scss",
				"Modular code is much easier to maintain.  Finding things you want to change is easy."
			],
			"code": {
				"type": "scss",
				"content": "/** three files named _normalize.scss, _variables.scss,\n_navigation.scss. **/\n\n@import \"normalize\";\n@import \"variables\";\n@import \"navigation\";"
			}
		},
		{
			"heading": "Inheritance",
			"bullets": [
				"Inheritance allows you to extend a rule-set into another",
				"A rule-set can be a subset of another, and take on all of its property values",
				"This example is taken directly from the Sass website"
			],
			"code": {
				"type": "scss",
				"content": ".message {\n   border: 1px solid #ccc;\n   padding: 10px;\n   color: #333;\n}\n\n.success {\n   @extend .message;\n   border-color: green;\n}\n\n.error {\n   @extend .message;\n   border-color: red;\n}\n\n.warning {\n   @extend .message;\n   border-color: yellow;\n\n/** compiles down to **/\n\n.message, .success, .error, .warning {\n   border: 1px solid #cccccc;\n   padding: 10px;\n   color: #333;\n}\n\n.success {\n   border-color: green;\n}\n\n.error {\n   border-color: red;\n}\n\n.warning {\n   border-color: yellow;\n}"
			}
		},
		{
			"heading": "Mixins",
			"bullets": [
				"Mixins are sort of like functions",
				"They’re a way of injecting declarations into a rule-set without inheritance",
				"You can pass arguments into them that can be used to calculate properties"
			],
			"code": {
				"type": "scss",
				"content": "@mixin pseudo($display: block, $pos: absolute, $content: '') {\n   content: $content;\n   display: $display;\n   position: $pos;\n}\n\n/** Usage **/\n\ndiv::before {\n   @include pseudo;\n   top: -1rem;\n   left: -1rem;\n   width: 1rem;\n   height: 1rem;\n}"
			}
		},
		{
			"heading": "A Few Other Sass Features",
			"bullets": [
				"Sass has basic mathematical operators",
				"You can easily convert between pixels and percentages",
				"Sass has basic control directives (if/else statements), lists, and functions",
				"Sass has a <a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\">large library</a> of built in functions that you may find useful (I haven't honestly)"
			]
		},
		{
			"heading": "Real World Example",
			"bullets": [
				"Here's a fairly simple example of a <a href=\"http://office-demo-rsp.azurewebsites.net/\" target=\"_blank\">Website</a> that used Sass",
				"Many elements are reused, and can be stored as variables",
				"There are columns of various sizes, and many of their properties can be saved as mixins",
				"Spaces between different elements are a consistent size.  Operators can be used to recalculate if space is changed"
			],
			"code": {
				"type": "scss",
				"content": "/** Columns use \"column\" mixin, some math operations,\nand a $gutter variable **/\n\n@mixin column-one-third {\n   display: block;\n   position: relative;\n   box-sizing: border-box;\n   flex: 0 0 33.33333%;\n   max-width: 33.33333%\n}\n\n$gutter: 24px;\n\n/** Columns **/\n\n.content-columns {\n   position: relative;\n   display: block;\n   width: 100%\n   vertical-align: top;\n\n   .col-one-third:nth-child(3n + 1){\n      @include column-one-third;\n      padding-right: $gutter * (2/3);\n   }\n\n   .col-one-third:nth-child(3n + 2) {\n      @include column-one-third;\n      padding-left: $gutter * (1/3);\n      padding-right: $gutter * (1/3);\n   }\n\n   .col-one-third:nth-child(3n) {\n      @include column-one-third;\n      padding-left: $gutter * (2/3);\n   }\n}"
			}
		},
		{
			"heading": "In Conclusion:",
			"bullets": [
				"CSS preprocessors have many features, some very useful",
				"You don't need to learn every feature to improve your CSS writing experience",
				"I recommend just breaking your code into partials and using using variables to start out with CSS preprocessing"
			]
		}
	]
}